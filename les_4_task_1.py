# Задача на получение суммы всего ряда 1, -0.5, 0.25, -0.125, ...
import timeit
import sys
sys.setrecursionlimit(100000)

N = 10

#рекурсия
def r_sum(n):
    if n == 1:
        return 1
    else:
        return 1 + r_sum(n - 1)/(-2)

#цикл
def f_sum(n):
    item = 1
    sum_ = 0
    for _ in range(n):
        sum_ += item
        item /= -2
    return sum_

# вариант с геометрической прогрессией
def g_sum(n):
    return 1 * (1 - (-0.5) ** n) / (1 - (-0.5))


num = 1000

print('', end='\t')
print('Рекурсия', end='\t\t\t\t')
print('Цикл', end='\t\t\t\t\t')
print('Уравнение')

for i in range(1, 11):
    print(f'{i}', end='\t')
    print(timeit.timeit(f'r_sum({i})', number=num, globals=globals()), end='\t')
    print(timeit.timeit(f'f_sum({i})', number=num, globals=globals()), end='\t')
    print(timeit.timeit(f'g_sum({i})', number=num, globals=globals()))


 # В качестве примера взята задача на получение суммы всего ряда 1, -0.5, 0.25, -0.125, ...
 # Три вида алгоритма которые выполняют одну и тужу задачу
 # 1. Рекурсивный
 # 2. Цикл
 # 3. Уравнение
 # Параметр проверки - значения увеличивающиеся в цикле от одного до 10, где для усреднения было взято 1000 вызов функций
 # Согласно полученным значением самым быстрым алгоритмом от 1 до 2 - рекурсия, второй - уравнение, третий - цикл
 # значение 3, самый быстрый уровнение, второй - рекурсия, третий цикл
 # от 4 до 10 значения самый быстрый - уравнение, второй цикл, третий - рекурсия
 # По 10и полученным значениям можно предположить, что скорость выполнения алгоритма уравнения близка к константе,
 # алгоритм цикла - линейный, т.е. значения линейно увеличиваются
 # рекурсивный алгоритм самый быстрый на очень ограниченном диапазане значений, только от 1 до 2, причем согласно значениям
 # уравнения - время выполнения равно 2 в степени n, что, от значения 4 и выше, делает его полностью неприемлемым для работы с большими числами
 # Вывод:
 # Алгоритм - уравнение, является самым быстрым от значений 2 до бесконечности и является самым быстрым в среднем (например от случайных чисел от 1 до 5 и выше),
 # Алгоритм уравнения наиболее ПОДХОДЯЩИЙ для работы.

# Результат выполнения работы алгоритмов по 10и значениям

# 1	0.00011909999999999699	0.0004588999999999982	0.00042040000000000133
# 2	0.0003273999999999985	0.0005447000000000021	0.00041200000000000264
# 3	0.0005766000000000035	0.0006222999999999992	0.00040939999999999727
# 4	0.0007985999999999965	0.0007109999999999964	0.00040889999999999677
# 5	0.0014383999999999994	0.0007932000000000008	0.00040950000000000014
# 6	0.0012770000000000004	0.0010576000000000058	0.0004104999999999942
# 7	0.0015097999999999917	0.0009523000000000031	0.0004090999999999956
# 8	0.0017403000000000002	0.0010307999999999984	0.0004094000000000042
# 9	0.001973599999999992	0.0011117999999999961	0.00040930000000000133
#10	0.0022575000000000095	0.0013255000000000072	0.00040989999999999083



